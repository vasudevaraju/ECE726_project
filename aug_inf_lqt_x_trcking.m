clear;clc;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%authors: Sreechakra Vasudeva Raju Rachavelpula, Mohammad Sareeb Hakak


%This code generates the control for the linearized plant model of the 
%quadcoptor by solving the infinite horizon tracking lqr problem. For this, 
%the trajectory generator dynamics are augmented to the original system. 
%However, because the trajectory generator dynamics are uncontrollable from 
%the plant control inputs, the control is generated by minimizing the 
%discounted cost function. For more information about the lqr problem with 
%a discounted cost function, refer to the following paper: 
%https://doi.org/10.1109/TAC.2014.2317301

%This code only generates the control for the x-coordinate of the
%quadcoptor center. The x-coordinate is made to track the trajectory 
%xref =sin(t) for simplicity. The linearized model of the plant allows for 
%decoupling of the x, y, z and yaw dynamics. Hence the control for y-coord,
%z-coord and yaw of the quadcoptor can be designed similarly

%The states related to the dynamics in the x-direction are so:
%[x,x.,th,q] where 
%x is the x-coordinate
%x. is the velocity in the x-direction
%th is the rotation about the y-axis
%q is the angular velocity about the y-axis

%The control input is the torque about y-axis 'u3'


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
m = 1.4; Iy = 0.03;g=9.81;

A = [0,1,0,0;...
    0,0,9.81,0;...
    0,0,0,1;...
    0,0,0,0];
Aaug = [A,zeros(4,2);zeros(2,4),[0,1;-1,0]];
B = [0;0;0;1/Iy];
Baug = [B;zeros(2,1)];
C = [1,0,0,0];
Caug = [C, -1,0]; %output is error between x and xref
D = 0;
i = 0;
Q= eye(1); %state cost
R= 1; %control cost
Qaug = Caug'*Q*Caug;

gam = 0.01; %discount factor
S0 =0.5*ones(size(Aaug,1)*(size(Aaug,1)+1)/2,1); 
%S0 is intial guess for solution S of the ARE 
opt = optimoptions('fsolve','MaxFunctionEvaluations',1e5);
S_elements = fsolve(@(x)are_solve(x,Aaug,Baug,Qaug,R,gam),S0,opt);
%Solve the discounted ARE and get the n*(n+1)/2 elements of S as S_elements
%S_elements contains the diagonal and upper triangular terms

i =1;
S = zeros(size(Aaug,1),size(Aaug,1));
for k = 1:size(Aaug,1)
for l =k:size(Aaug,1)
if l ~= k
S(k,l) = S_elements(i);
S(l,k) = S_elements(i);
i =i+1;
else
S(k,l) = S_elements(i);
i =i+1;
end
end
end
%Rearrange the S_elements vector into the symmetric matrix S

[t,x] = ode45(@(t,x) ((Aaug-Baug*inv(R)*Baug'*S)*x),[0:0.1:10],[1,zeros(1,3),0,1]);
figure;plot(t,x(:,1),t,x(:,5))
figure;plot(t,x(:,2))
figure;plot(t,x(:,3))
figure;plot(t,x(:,4))
%Plot the states

%% This function contains the discounted ARE 
function f = are_solve(x,A,B,Q,R,gam)
i =1;
S = zeros(size(A,1),size(A,1));
        for k = 1:size(A,1)
            for l =k:size(A,1)
                if l ~= k
                    S(k,l) = x(i);
                    S(l,k) = x(i);
                    i =i+1;
                else
                    S(k,l) = x(i);
                    i =i+1;
                end
            end
        end

F = A'*S +S*A - S*B*inv(R)*B'*S + Q - gam*S; %Discounted ARE
i = 0;
        for k = 1:size(A,1)
            for l =k:size(A,1)
                i = i+1;
                f(i) = F(k,l);
            end
        end
end
